[{"id":0,"href":"/docs/topics/career-support/","title":"Career Support","section":"Topics","content":"Career Support #  The following is a summary of the collaborative discussion about \u0026ldquo;Uses of Github to support your career\u0026rdquo;, that took place during the SORTEE Hackathon. Go to this hackmd document for original notes from participants.\nParticipants of this topic:\nIrene Godoy\nDylan Gomes\nLayla Michán\nLuna L. Sánchez Reyes\n1. Presentation of the breakout room topic #  Examples of career supporting resources:\n Personal and Academic websites Project websites CVs Presentations, slides \u0026amp; talks Tutorial \u0026amp; Workshop websites Course websites Using GitHub projects to manage your work  How do we use GitHub to support our careers?\n  Actually create a website by using GitHub pages https://pages.github.com/\n This can allow us to showcase our coding skills by including code snippets, interactive plots, etc. directly on our websites.    Store resources\n Easily find our own data and code on multiple machines and have backups.    Hosting and deploying the resources itself\n  Share resources\n  Collaborate \u0026amp; Network\n  2. Exposition of examples and individual/collective practices #   Personal or Academic Websites:  Examples:\n https://www.lunasare.com https://lmichan.github.io/biocolores  Non-GitHub example:\n https://dylangegomes.wixsite.com/home  GitHub repo: https://github.com/LunaSare/blogdown_lunasare\n Project websites:  Example: https://randyposada4.github.io/bats/\nGitHub repo: https://github.com/Randyposada4/bats\n CVs:  Example: https://docs.google.com/loreabad6/R-CV/master/CV.pdf\nGitHub repo: https://github.com/loreabad6/R-CV\n Presentations, Slides \u0026amp; Talks:  Example: https://lunasare.github.io/slides/\nGitHub repo: https://github.com/LunaSare/slides\n Tutorials \u0026amp; Workshops  Example: https://lunasare.github.io/ssb2020_workshop/03-broken-taxa/index.html\nGitHub repo: https://github.com/LunaSare/ssb2020_workshop\nExample: https://opentreeoflife.github.io/SSBworkshop/\nGitHub repo: https://github.com/OpenTreeOfLife/opentreeoflife.github.io/blob/master/SSBworkshop.md\nLayla\u0026rsquo;s:\nhttps://sites.google.com/a/ciencias.unam.mx/layla-michan/cursos/pcm\nIrene\u0026rsquo;s:\nhttps://sites.google.com/view/irene-godoy/curriculum-vitae\n3. Discussion and summary of challenges #  Consider the following discussion questions:\n  What other tools have you used for this purpose?\n Websites: Wix squarespace, Google Sites CVs: google sites has templates, is a bit interactive, you can insert airtable data. CVs: Air table database management software. Is very friendly, no coding knowledge needed at all, it hs many templates, it will give you free hosting if it is a project important for the community. VS GitHub is free no matter what. You can also use airtable for free but with limited options (not full functionality) CVs: word is just the worse lol, it is not free, formatting is a mess.    How does GitHub compare to other tools you\u0026rsquo;ve used for this purpose?\n Wix sites are more difficult to make look professional and difficult to embed plots, code, etc. (especially dynamic) The amount of templates available on GitHub might be potentially infinite: you can fork public repositories from any other user to use as templates    What are the main challenges in using GitHub for this purpose?\n Do we need to know how to code to use GitHub to create resources? Understanding where to get started in creating a website  Dylan: is not straightforward where to begin (even with lots of GitHub/RStudio/Rmd experience). Irene: as a proficient R user, it should not take a long time for her to make her own website, if she forks it from a template Layla: in her experience, it was hard to make her website using github pages. It took her a long time.   Use of git from terminal vs. from rstudio or GitHub desktop: terminal seems to be more efficient but it seems daunting at the beginning \u0026ldquo;I am a real hacker now!\u0026rdquo;    What are the main benefits of using GitHub over some other tool?\n It is easily editable once it is set up (code tweaks), which make reproducing pages, etc. easier.     What could be done to improve GitHub for this purpose?\n Easier explanations, using non-technical language, are there any demos available? the learning curve is too steep it is inviting to work with it but it is still very scary to use it. It is not related to generation but more related to how much you are familiar with coding, designed for people that is used to the terminal and not a graphical user interface. Even if the graphical user interface is really friendly, usage is still not. Layla had to follow a tutorial to create her webpage. My college student took 3 to 6 months to not be too scared to change anything on his repo!    4. Return of participants and organizers to the main workshop room #  Summary: The participants decided to make an infography of this breakout room subject, in english and spanish. Github is not the most intuitive without coding knowledge. There must be a way to make it simpler for new users, to expand the community.\nParticipants are also interested in using GitHub for:\nSharing data Hosting resources\n"},{"id":1,"href":"/docs/topics/dynamic-collaboration/","title":"Dynamic Collaboration","section":"Topics","content":"Dynamic Collaboration #  Session organizers and material developers: Pedro Henrique P. Braga- *and Katherine Hébert = *   \nAccess the material #  Material for this Hackathon\u0026rsquo;s session\nMaterial for Exercise 2\nStatus #  \n\n"},{"id":2,"href":"/docs/","title":"Hackathon Schedule","section":"Introduction","content":"Hackathon Schedule #  \n 4.5 hours\n18:30-23:00 UTC\n11:30-16:00 PT\n14:30-19:00 ET    Timing UTC/PT Activity     18:30 / 11:30am General introduction of the workshop timeline, objectives, recommended behaviour, and session organizers   18:45 / 11:45am Short introduction about the power of Git and Github, about the experience of session organizers, and question period   19:05 / 12:05pm Explanation and assignment of participants and organizers to breakout rooms   19:15 / 12:15pm BREAK   19:25 / 12:25pm Collaborate in breakout rooms (minimum 3 people per room). See breakout room details below.   20:25 / 1:25pm BREAK   20:35 / 1:35pm Breakout room summary and group discussion. Each group reports back in 5-10 min   21:30 / 2:30pm BREAK   21:40 / 2:40pm Closing and next steps   22:00 / 3:00pm optional Start manuscript outline in breakout writing rooms   23:00 / 4:00pm END     Breakout room details #  Participants can choose from one of 5 breakout rooms #   Visualizing data and results Career-supporting resources Research documentation Programming and code support Dynamic collaboration  Within each breakout room, we\u0026rsquo;ll cover the following topics: #  Step 1: Presentation of the breakout room topic\nStep 2: Exposition of examples AND/OR individual/collective practice session\nStep 3: Discussion and summary of challenges\nStep 4: Return of participants and organizers to the main workshop room\nWithin each breakout room, consider the following discussion questions: #   What other tools have you used for this purpose? How does GitHub compare to other tools you\u0026rsquo;ve used for this purpose? What are the main challenges in using GitHub for this purpose? What are the main benefits of using GitHub over some other tool? What could be done to improve GitHub for this purpose?  What questions do we want to address during the discussion? #   How often do you see GitHub being used in these ways in ecology and evolution? Any examples come to mind? (Examples can be useful to include in manuscript outline) Do you think ecology and evolution would be improved with more usage of these tools? In what ways? What parts of ecology and evolution are beyond the scope of these tools? And provide example (e.g., _____ is a better platform for _____.) What parts of ecology and evolution are put at risk by these tools? e.g. concerns about scooping/data security (If you work in Eco/Evo) Would you consider using GitHub for any of your current or future projects, or recommend it to your colleagues? If so, what would you most want to use it for (visualisation, documentation, etc.)?  Writing rooms #   General paper organization Figure brainstorming Blog post brainstorming  Notes from the hackathon #  How do we plan to use github going forward? Check out our padlet responses here!\nWorking with EcoEvo people it is apparent that the use of GitHub is predicated by the use of R and other programming languages. Instead of using 3rd party data management. A lot of emphasis in R based tools, but highlight all the things that you can do on GitHub that have nothing to do with R.\nThere is reluctancy from students and PIs or collaborators in using GitHub. Reasons:\n lack of time, not worth the effort. Baby steps to start using GitHub: Example: \u0026ldquo;Learn how to use issues first.\u0026rdquo;  Make clear that it is really hard to make mistakes on GitHub.\nDemoing the benefits of learning and all the time that you will eventually save if you learn. Initial investment is hight byt payoff is really high too.\nThere are so many tools available and it is hard to choose.\nFear of getting in touch with a new language.\nIt is not taught in colleague yet as a basic course.\nTop down resistence as opposed to bottom up resistence.\nMany things can be done from the desktop graphical user interface.\nPIs afraid to be scooped. Solutions:\n Private repo, going public upon publication. Licensing. Terms of use. You actually have premise once you publish it. You wil have more citations.  Fear of being so open, kind of vulnerable, everybody will see all your errors.\nDifference between code peer review and paper peer review. One is easier than the other\nEco-evo specific version of https://doi.org/10.1371/journal.pcbi.1005510\nMethods in Ecology and Evolution.\nhttps://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13652\nNo body really knows all the possibilities that GitHub has to offer.\nMaybe make a chart of tools, list what they have to offer and then compare to GitHub.\nGoal: take the angle of things that you can do with version control, either GitHub or any other tool.\n"},{"id":3,"href":"/docs/topics/programming-and-coding/","title":"Programming and Coding","section":"Topics","content":"Programming and Coding #  This document serves as a place holder for content that will be collaboratively created at Hackathon. link to hack.md doc\nPresentation of the breakout room topic Step #  Exposition of examples OR individual/collective practices #  Discussion and summary of challenges #  Return of participants and organizers to the main workshop room #  Questions for Group #  What other tools have you used for this purpose? How does GitHub compare to other tools you’ve used for this purpose? What are the main challenges in using GitHub for this purpose? What are the main benefits of using GitHub over some other tool? What could be done to improve GitHub for this purpose?\n"},{"id":4,"href":"/docs/topics/research_documentation/","title":"Research documentation","section":"Topics","content":"Breakout rooms 1/3 - Visualizing data and Results \u0026amp; Research documentation #  Markdown CheatSheet Our Github Repo Google slides \nWe\u0026rsquo;ll cover the following topics: #  Step 1: Presentation of the breakout room topic\nStep 2: Brief tutorial and time for individual practice\nStep 3: Discussion and summary of challenges\nStep 4: Return of participants and organizers to the main workshop room\nExamples / References that display research documentation, data, and results #  Use of displaying notebooks as experiments on Github\n Team working on optimization of a neural network: https://github.com/DiscoveryDNA/team_neural_network/tree/master/code/experiments \u0026ldquo;Toolchain walkthrough\u0026rdquo; for organising data for systematic review: https://github.com/softloud/sysrevdata (https://softloud.github.io/sysrevdata/)  Working on a team using Github Organizations\n Overarching research team that works on multiple projects. Seperating projects that range from experiments to software: https://github.com/DiscoveryDNA An ugly example of team working: https://github.com/LivingNorway  Hosting website to work on research publicly\n Organization that shares tutorials and research. Each project will evolve into a \u0026ldquo;post\u0026rdquo; on website https://github.com/cabinetofcuriosity Website: https://github.com/cabinetofcuriosity/cabinetofcuriosity_site  Documentation of data standards\n https://github.com/ess-dive-community  Archival of code and results for papers\n  Largely non-computational project. Code was just used to analyze resutls and create graphs: https://github.com/iamciera/sister-of-pin1-material/blob/master/cosegregation/readme.md\n  Largely Computational Project: https://github.com/iamciera/lcmProject\n  Learning Github\n https://github.com/hlowman/TidyTuesday/blob/master/resources/Git_GitHub_Guide.pdf https://afredston.github.io/learn-git/learn-git.html  Discussion questions: #   What other tools have you used for this purpose?  Sharing files back and forth Microsoft Office with track changes OSF R package   How does GitHub compare to other tools you\u0026rsquo;ve used for this purpose?  Harder to get some collaborators on board Smaller file size limits Undergrads can be the best adopters, helping with data tidying (no habits), one workshop at the beginning microsoft owns github size limits actually quite large on OSF   What are the main challenges in using GitHub for this purpose?  Making sure everyone on team is willing to use Size limits Certain file types have cryptic \u0026lsquo;diff\u0026rsquo; documentation in Github large corporation owning code terminology not consistent across programs Working with a team with varying skill levels and associated challenges seems like a big step relative to track changes in MS word - some collaborators still reluctant to even use Google drive   What are the main benefits of using GitHub over some other tool?  Making sure all collaborators are using the same version Example of a microsoft access database- collaborating with several students including undergrads   What could be done to improve GitHub for this purpose?  Glossary of terms put into user-friendly language teaching git starting with 5 commands, not overwhelming with all vocabulary teasing apart which software engineering principles are needed for researchers, vs. what should be delegated to a software engineering role within a research team Explain to students that it\u0026rsquo;s very hard to \u0026lsquo;break\u0026rsquo; it Starting with low stakes projects Make learning project-based You don\u0026rsquo;t have to use github if you use git: Gitlab instead of Github, but same fallbacks. Gitlab offered free private repos When teaching Git/Github, it\u0026rsquo;s important not to transfer hesitancy to students \u0026ndash; helpful to model behaviour of not needing to be an expert and making mistakes    Misc discussion #   Some members seeing big disjunct between their willingness to adopt new technology relative to PIs - writing manuscripts as markdown documents, converting into word, getting back track changes and implementing manually github pilot - helps autocomplete code, took everyone\u0026rsquo;s code and did ML including all license types people like software developers experience more top down support/pressure to adopt, whereas researchers usually working from bottom up dealing with big files - splitting and binding big files can help adding releases helps get around file size restrictions - unlimited file size osf R package as an alternative for written components of projects, scripts go onto github As a minimum situation where no new software needs to be learned - build timestamp into all documentation (including data download) most software engineers don\u0026rsquo;t store data either locally or online \u0026ndash; this is why there is a limit  "},{"id":5,"href":"/docs/topics/tech-support/","title":"Tech Support","section":"Topics","content":"Tech Support #  This document serves as a place holder for content that will be collaboratively created at Hackathon. link to hack.md doc\nPresentation of the breakout room topic Step #  Exposition of examples OR individual/collective practices #  Discussion and summary of challenges #  Return of participants and organizers to the main workshop room #  Questions for Group #  What other tools have you used for this purpose? How does GitHub compare to other tools you’ve used for this purpose? What are the main challenges in using GitHub for this purpose? What are the main benefits of using GitHub over some other tool? What could be done to improve GitHub for this purpose?\n"},{"id":6,"href":"/docs/topics/visualizing-data-and-results/","title":"Visualizing Data and Results","section":"Topics","content":"Visualizing Data and Results #  This document serves as a place holder for content that will be collaboratively created at Hackathon. link to Collaborative Google Doc\nPresentation of the breakout room topic #  Questions I am interested in:\n How do we use Github to display our data and results? Notebooks, Websites, ect How do we build our Github repositories and organizations for displaying our work to our team or community? Directory structure, documentation, ect Github vs Other venues? Is Github even right for this?  Exposition of examples OR individual/collective practices #   Use of displaying notebooks as experiments on Github  Example: https://github.com/DiscoveryDNA/team_neural_network/tree/master/code/experiments   Working on a team using Github Organizations  Example: https://github.com/DiscoveryDNA   Hosting website to work on research publicly  Example: 1. Organization: https://github.com/cabinetofcuriosity 2. Website: https://github.com/cabinetofcuriosity/cabinetofcuriosity_site    Discussion and summary of challenges #  Return of participants and organizers to the main workshop room #  Questions for Group #  What other tools have you used for this purpose? How does GitHub compare to other tools you’ve used for this purpose? What are the main challenges in using GitHub for this purpose? What are the main benefits of using GitHub over some other tool? What could be done to improve GitHub for this purpose?\n"},{"id":7,"href":"/posts/github-for-research-documentation/","title":"GitHub for research documentation","section":"Blog","content":"GitHub for research documentation #  See the slides here\n\nA tutorial written by Emma Hudgins\n1. Getting set up #   Make a Github account Download the Github Desktop App (optional) Create an OSF account (optional) Create a Research Data Management Plan for your project  2. Using GitHub desktop #  2.1 creating a repo #   In the left pane, select Add to create a new repository Choose Create new repository and give the path to a new project folder (or fork this one via Clone, or add an existing folder).  I keep all my repos in my OneDrive.1in a folder called Github  1. Some people say not to do this because it causes OneDrive to constantly sync small Github files, but it doesn\u0026rsquo;t seem to cause me any trouble, and it helps me avoid accidentally deleting things when I make mistakes with GitHub Desktop. see here for at least one other person who does this Choose a License that reflects the reuse conditions you\u0026rsquo;d like for your project (see here for a description of licenses available) Initialize the repo with a README that you will fill following the Metadata tips in section 4. to ensure reproducibility If necessary, change the privacy settings of your repo on the Github website (storage limits are lower for private repositories). If the repo does not yet exist online, make sure you Publish it.  2.2 Your first commit! #   You can manually open your files as usual, but you can also use the Repository tab to open your files all at once in a text editor (I set my default to Sublime) Try make a small change to one of your files, or create a new file. If you navigate back to Github desktop, there should be evidence of a changed/new file  If you\u0026rsquo;re satisfied with your changes, type a commit message (or use the default for a single file change) and press Commit to main Send your changes to Github\u0026rsquo;s server by pressing Push to origin  Your changes should now be reflected on the online version of your repo! NOTE: There should be a Git pane in the top right of newer versions of RStudio when you\u0026rsquo;re working in an R Project contained within a Github repo, and using it to Push and Commit works similarly to Github Desktop.  2.3 Pulling online changes to your machine #    Now, try changing a file on the online repo (e.g. using the pencil icon to update the README)\n  Here\u0026rsquo;s an example of the Commit menu after I edited the README -\n  You may need to click \u0026lsquo;Fetch origin\u0026rsquo; to see your changes   Now Pull   Now your local computer should be up to date with the online repo!\n  NOTE: There should be a Git pane in the top right of newer versions of RStudio when you\u0026rsquo;re working in an R Project contained within a Github repo, and using it to pull works similarly to Github Desktop.\n  3. Linking GitHub with OSF #   Create a new OSF project  Or use a template (My lab has started following this basic template)  Use a program like DMP Assistant to add a Research Data Management Plan to the RDMP section of the OSF project Add GitHub as an Add-on in your OSF profile in Settings\u0026raquo; Select add-ons  Link GitHub with your OSF account in the Add-ons section of the relevant project components (e.g. Analysis)  Select Import Account from Profile  Select the corresponding repo for the project     4. Some reproducibility tips (largely taken from the Bennett Lab manual compiled by Jaimie Vincent) #    Data management and storage\n Starting any research project with an RDMP provides direction for conducting research in line with Open Science/FAIR practices. Data and code should be backed up regularly, using the “3-2-1” rule as a rule of thumb - this means having three copies of your data (your working copy and two backups) on two different formats (e.g., cloud storage and disk storage) with at least 1 off-site copy for disaster recovery. Update your RDMP as necessary to include information about where these files will be permanently stored in addition to your storage, backup, security and archiving protocols. Your code and/or analyses, interpreted data, and other outputs (e.g., figures, tables) should be continuously backed up and securely stored. Be sure to consider data privacy when making backups. Store data and code in an organized file system (for instance, using a breakdown of scripts, raw data, derived data , outputs within a large project directory) Do not alter the raw data (consider making it read-only) to have a stable separate copy    Intellectual property\n This is particularly important to discuss when the work belongs to students whose association with a particular research group may be temporary. The RDMP can help transparency around whose intellectual property this work represents. It can be useful to name a single data steward who is responsible for the maintenance of the code and data throughout its lifecycle    Metadata\n There should be adequate metadata documentation. Metadata provides information about code and data function and usage, and often takes the form of ‘README’ files in research projects. GitHub Desktop asks if you want to initialize a README file whenever you create a new repo Consider having a single readme at the minimum for the project that outlines all scripts and input data files and how they interact such that the analyses can be reproduced. At the minimum, this file should contain the project Title, Authors, Description - including of all folder subdirectories and how they relate to each other, Date, and License. GitHub allows easy association of a variety of license types with repositories - consider a license like GPL or CC-BY to ensure allowability of the reuse of your code Cryptic naming conventions in data files should be described, as well as any units and geographic transformations. If the project includes external data sources, download dates should be provided as well as any relevant filters selected. Update the metadata following any changes to the workflow    Code\n Provide software and package version information in either the metadata or in a commented header section of any script Provide annotated code with comments describing all steps taken in the analysis All figures and tables should be entirely reproducible with the code and data provided (data privacy restrictions permitting). For sensitive data, plan for appropriate anonymization and secure storage Consider using packages that guess working directories (e.g. here package for R), or using project files like .Rproj to facilitate data and code integration when the data and code are shared    Hosting\n Link the project with a platform that can provide a persistent link to the published version of the data (e.g. Zenodo link with GitHub, Dryad) in order to ensure the published results can be reproduced even as the workflow evolves. See here for how to create a Release and link with Zenodo    Naming (OSF naming guidelines)\n Consider adopting a standard file naming convention, i.e. using dashes or underscores to separate name components (avoiding special characters and spaces, especially) Use the most informative naming as possible within all project components (including variable names in code). Number or date scripts so that they order themselves meaningfully (i.e. by order of use or version number)    Appendix 1. Connecting to a remote server via SSH (in case you want to sync your GitHub repo with a server for backup or computing power) #   Open terminal (Ctrl+Alt+T on Ubuntu, Command+Space on Mac to bring up Spotlight and search for Terminal, or use the Windows Start menu and look for Windows Powershell or Command Prompt) Type ssh user@hostname for the remote machine you want to connect to  EmmaH:~/$ ssh ehudgins@nature-vm04.carleton.ca  Enter your password when prompted, (be prepared to say Yes to yet another message about a fingerprint) Navigate to the directory where your script is stored (maybe you transfered it there with FileZilla?) using cd  Appendix 2. Configuring git on a remote machine (this section also shows you how to embed code chunks in Markdown) #    If you want to sync an existing GitHub repository, use git in the terminal (see here for more info on working with git in various ways)\n  To clone a GitHub repo to a remote machine, install git\n in the terminal (for Ubuntu), type  ehudgins@nature-vm04:~/$ sudo apt install git  see here for other OS instructions Configure git for your GitHub account  ehudgins@nature-vm04:~/$ git config --global user.email \u0026quot;you@example.com\u0026quot; ehudgins@nature-vm04:~/$ git config --global user.name \u0026quot;Your Name\u0026quot;   Clone using\n  ehudgins@nature-vm04:~/$ git clone https://github.com/emmajhudgins/example_github_osf  If you update the repo on your local computer, pull from the folder  ehudgins@nature-vm04:~/example_github_osf$ git pull  If you update the repo on this remote machine, commit changes and push to origin  ehudgins@nature-vm04:~/example_github_osf$ git add \u0026lt;changed file\u0026gt; ehudgins@nature-vm04:~/example_github_osf$ git commit -m \u0026quot;\u0026lt;message\u0026gt;\u0026quot; ehudgins@nature-vm04:~/example_github_osf$ git push "},{"id":8,"href":"/docs/topics/","title":"Topics","section":"Hackathon Schedule","content":"Overview of Topics #   Career Support Dynamic Collaboration Programming and Coding Research Documentation Tech Support Visualizing Data and Results Writing Session Notes  "},{"id":9,"href":"/docs/hidden/","title":"Hidden","section":"Hackathon Schedule","content":"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":10,"href":"/docs/topics/writing_session_notes/","title":"Writing Session Notes","section":"Topics","content":"Writing Session notes #  \nThe goal of write-up (blog post and then manuscript) #   We want to create a \u0026lsquo;guide\u0026rsquo; Here\u0026rsquo;s what you can do with github, take them or leave them. (And the drawbacks too!) Make sure we are highlighting limitations by our background in ecoevo (e.g., our reliance on R). These are the hurdles specifically in EcoEvo. And make specific recs. (e.g., PI can make GitHub issues on their student\u0026rsquo;s code). Journal considerations: Methods in EcoEvo And GitHub isn\u0026rsquo;t the \u0026lsquo;end all be all\u0026rsquo; Take the elements of GitHub that work for you, but this can be done on many platforms  Blog ideas\n Methods in EcoEvo has a blog: https://methodsblog.com/  Journal ideas\n Journal of Statistics and Data Science Education Reproducibility Special issue: https://nhorton.people.amherst.edu/call_reproducibility.pdf From their call for papers: Topics in the special issue that align with our proposal: Incorporating source code (version) control systems, Developing and implementing documentation and code standards, Supporting collaboration September 15, 2021 (deadline for submissions) Methods in EcoEvo publishes lots of \u0026lsquo;guides\u0026rsquo; https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13652 elife (Prof. Eisen gave plenary and is editor of this journal) https://elifesciences.org/ They require preprints published before review Rio: https://riojournal.com/ TREE: https://www.cell.com/trends/ecology-evolution/aims Ecological Informatics: https://www.sciencedirect.com/journal/ecological-informatics/about/aims-and-scope  GitHub and R in EcoEvo #  In EcoEvo github use is predicated on an understanding R. This close connection has some benefits, but Python, Julia. Lots of ways to use GitHub that are independent from R. We have in this hackathon a definite focus on R tools for interacting with GitHub, but sometimes the issues we present at \u0026lsquo;github\u0026rsquo; issues might be more about the ways that we interact with Github (i.e. through R vs shell)\nIdea for a figure/algorithm #  Flow chart that can guide us in what we need to learn to get the most out of gitHub in this moment\n focus on learning how to submit issues 4 different people that might want to use GitHub: first time learner, PI, individual researcher who is going to do this all, person who wants to advance their workflow using github (i.e. learn a bunch of new things!) Make a table/figure: Here are the alternative tools for collab / version control, Check marks for what github does vs. google docs vs. zenodo vs. edit-save-attach  ^This reminds me of the RStudio \u0026ldquo;learner personas\u0026rdquo; which might serve as a model: https://rstudio-education.github.io/learner-personas/\nA few of pain points to using GitHub #  1. The GitHub learning curve (technical skills) #  Learning to use Github requires time, but the payoff is worth it.\n Time vs. effort examples or analyses to demonstrate the payoff can help drive the point home to convince people to learn these tools New job? Interdisciplinary collab? May have to be prepared for working with version control software. What\u0026rsquo;s the minimum github knowledge that you need to know to start using github And, if you make a mistake, you can always undo it!  2. Reluctance to do science openly (cultural reluctance) #  Fear of scooping or sharing data also feeds into reluctance due to worries of intellectual property.\n suggestion: to keep the repository private until publication, then make it public suggestion: make use of github licenses to indicate that material on github is citable! And journals (e.g., AGU-related journals) require data/code sharing and they don\u0026rsquo;t consider it \u0026lsquo;shared\u0026rsquo; unless there\u0026rsquo;s a working DOI For it. But publishing data/code on github is not a \u0026lsquo;one shot\u0026rsquo; aka eminem approach (thanks for this, Emma) Addressing ways to share links to private code for reviewers or collaborators without making everything public would be helpful for this  3. publishing code and data for peer review #   GitHub definitely helps with this process, but it\u0026rsquo;s still a pain point. How can we share private link for peer review, that has a citable DOI, but will DOI update   How to decide what to archive/host in GitHub #  Need to make decisision for what to host on GitHub, and when to post publicly vs. privately\nTop-down vs. bottom-up resistance #  Is reluctance to use git related to how entrenched you are in what you do (e.g. senior researchers)?\n being introduced to git in undergrad or as junior researchers seems to be easier or at least more common A lot of what senior researchers would use git(hub) to do (issues, pull requests, code review etc.) can actually be done via the browser without having to learn git commands. Kind of a minimal effort way to participate in open science. Convincing people to spend time learning new skills when their workflow is already working for them is hard, especially in a publish or perish type of culture that does not allow for \u0026ldquo;unproductive\u0026rdquo; (heavy quotation marks here) time  Idea for a \u0026lsquo;github survey\u0026rsquo; #   Can we do a search for field (i.e. animal behavior vs. ecology research) Journals to go through and see who shares code Ratio btwn web of science articles and tag per field (proxy for research effort)  Other resources: https://bioceed.uib.no/dropfolder/sites/bioSTATS-and-R/DataManagement/GitTutorial.html\n"}]